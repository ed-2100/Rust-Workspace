#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Position {
    vec2 points_position[4];
};
layout(set = 0, binding = 1, rgba8) uniform writeonly image2D output_texture;

lowp vec3 points_color[4] = {
    vec3(1.0, 1.0, 1.0),
    vec3(1.0, 0.0, 0.0),
    vec3(0.0, 1.0, 0.0),
    vec3(0.0, 0.0, 1.0)
};

void main() {
    uvec2 pixel_coords = gl_GlobalInvocationID.xy;
    uvec2 texture_size = imageSize(output_texture);

    if (pixel_coords.x >= texture_size.x || pixel_coords.y >= texture_size.y) {
        return;
    }

    lowp vec2 position = vec2(
        float(pixel_coords.x) / float(texture_size.x) * 2.0 - 1.0,
        float(pixel_coords.y) / float(texture_size.y) * 2.0 - 1.0
    );

    lowp vec3 sum_color = vec3(0.0, 0.0, 0.0);
    for (int i = 0; i < 4; i++) {
        lowp vec2 delta = position - points_position[i];
        lowp float dist_sqrd = dot(delta, delta);
        sum_color += points_color[i] / (dist_sqrd * 300.0 + 1.0);
    }
    sum_color = clamp(sum_color, vec3(0.0), vec3(1.0));
    sum_color = pow(sum_color, vec3(1.0 / 2.2));

    imageStore(output_texture, ivec2(pixel_coords), vec4(sum_color, 1.0));
}
